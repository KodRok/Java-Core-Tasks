package school.sorokin.javacore.oop.lesson4;
/*адача: Создать небольшую иерархию классов для демонстрации наследования и полиморфизма.
Создайте базовый класс Shape (фигура), у которого есть метод draw(),
выводящий что-то вроде "Drawing a generic shape".

Создайте 2–3 дочерних класса: Circle, Square, Triangle.
У каждого переопределите draw(), чтобы выводить специфическое сообщение (например, "Drawing a circle").

Создайте класс Canvas с методом main, где вы:
Объявите массив или список Shape[] shapes = { new Circle(), new Square(), new Triangle() };
Переберите массив и для каждой фигуры вызовите draw().
Убедитесь, что вызывается метод из каждого конкретного класса.

Дополнительно можно добавить метод в Shape — например, calculateArea(),
и переопределить в каждом дочернем классе, возвращая «псевдо-значение»
(или реальное вычисление, если зададите нужные поля).
Тогда снова продемонстрировать,
что вызов calculateArea() ведёт себя по-разному в зависимости от реального типа фигуры.

Критерии выполнения:
Минимум 3 класса, связанных по иерархии наследования.
Переопределение как минимум одного метода (draw).
Пример вызова методов через переменную родительского класса, содержащую дочерние объекты.*/
public class Canvas {
    public static void main(String[] args) {
        Shape[] shapes = { new Circle(), new Square(), new Triangle() };
        for (int i = 0; i < shapes.length; i++) {
            shapes[i].draw();
            System.out.println(shapes[i].calculatePerimetr());
        }
    }
}
