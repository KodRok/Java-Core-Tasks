package school.sorokin.javacore.multithreading.lesson4;
import java.util.concurrent.*;
import java.util.ArrayList;
import java.util.List;

public class AdvancedThreadPoolPractice {
    public static void main(String[] args) throws Exception {
        System.out.println("=== –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ 1: FixedThreadPool(3) ===\n");
        runExperiment("FixedThreadPool", Executors.newFixedThreadPool(3));

        System.out.println("\n" + "=".repeat(60));
        System.out.println("=== –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ 2: CachedThreadPool ===\n");
        runExperiment("CachedThreadPool", Executors.newCachedThreadPool());
    }

    private static void runExperiment(String poolType, ExecutorService executor) throws Exception {
        System.out.println("üèä‚Äç‚ôÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º " + poolType);
        System.out.println("–ó–∞–ø—É—Å–∫–∞–µ–º 5 –∑–∞–¥–∞—á —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...\n");

        // –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö Future
        List<TaskInfo> tasks = new ArrayList<>();
        long startTime = System.currentTimeMillis();

        // –ó–ê–î–ê–ß–ê 1: execute() —Å Runnable - –±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ (1 —Å–µ–∫)
        System.out.println("üöÄ –ó–∞–¥–∞—á–∞ 1: execute() - 1 —Å–µ–∫—É–Ω–¥–∞");
        executor.execute(createRunnableTask("–ó–∞–¥–∞—á–∞ 1", 1));
        tasks.add(new TaskInfo("–ó–∞–¥–∞—á–∞ 1", null, "execute()", 1));

        // –ó–ê–î–ê–ß–ê 2: submit() —Å Runnable - —Å—Ä–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ (2 —Å–µ–∫)
        System.out.println("üöÄ –ó–∞–¥–∞—á–∞ 2: submit(Runnable) - 2 —Å–µ–∫—É–Ω–¥—ã");
        Future<?> future2 = executor.submit(createRunnableTask("–ó–∞–¥–∞—á–∞ 2", 2));
        tasks.add(new TaskInfo("–ó–∞–¥–∞—á–∞ 2", future2, "submit(Runnable)", 2));

        // –ó–ê–î–ê–ß–ê 3: submit() —Å Callable - –±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ (1 —Å–µ–∫)
        System.out.println("üöÄ –ó–∞–¥–∞—á–∞ 3: submit(Callable) - 1 —Å–µ–∫—É–Ω–¥–∞");
        Future<String> future3 = executor.submit(createCallableTask("–ó–∞–¥–∞—á–∞ 3", 1));
        tasks.add(new TaskInfo("–ó–∞–¥–∞—á–∞ 3", future3, "submit(Callable)", 1));

        // –ó–ê–î–ê–ß–ê 4: submit() —Å Callable - –î–û–õ–ì–ê–Ø –∑–∞–¥–∞—á–∞ (8 —Å–µ–∫—É–Ω–¥)
        System.out.println("üöÄ –ó–∞–¥–∞—á–∞ 4: submit(Callable) - 8 —Å–µ–∫—É–Ω–¥ (–±—É–¥–µ–º –æ—Ç–º–µ–Ω—è—Ç—å!)");
        Future<String> future4 = executor.submit(createCallableTask("–ó–∞–¥–∞—á–∞ 4", 8));
        tasks.add(new TaskInfo("–ó–∞–¥–∞—á–∞ 4", future4, "submit(Callable)", 8));

        // –ó–ê–î–ê–ß–ê 5: submit() —Å Callable - —Å—Ä–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ (3 —Å–µ–∫)
        System.out.println("üöÄ –ó–∞–¥–∞—á–∞ 5: submit(Callable) - 3 —Å–µ–∫—É–Ω–¥—ã");
        Future<String> future5 = executor.submit(createCallableTask("–ó–∞–¥–∞—á–∞ 5", 3));
        tasks.add(new TaskInfo("–ó–∞–¥–∞—á–∞ 5", future5, "submit(Callable)", 3));

        System.out.println("\n" + "-".repeat(50));

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        System.out.println("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 1 —Å–µ–∫):");
        for (int i = 1; i <= 5; i++) {
            System.out.printf("‚è∞ –ü—Ä–æ—à–ª–æ %d —Å–µ–∫: ", i);
            for (TaskInfo task : tasks) {
                if (task.future != null) {
                    System.out.printf("%s[%s] ", task.name.substring(7), getTaskStatus(task.future));
                } else {
                    System.out.printf("%s[exec] ", task.name.substring(7));
                }
            }
            System.out.println();
            Thread.sleep(1000);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–≥–æ–π –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        System.out.println("\nüéØ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ó–∞–¥–∞—á–∏ 4 –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...");
        try {
            String result4 = future4.get(3, TimeUnit.SECONDS);
            System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ 4 —É—Å–ø–µ–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è: " + result4);
        } catch (TimeoutException e) {
            System.out.println("‚è∞ –ó–∞–¥–∞—á–∞ 4 –Ω–µ —É—Å–ø–µ–ª–∞ –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã - –û–¢–ú–ï–ù–Ø–ï–ú!");
            boolean cancelled = future4.cancel(true); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            System.out.println("üö´ –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ 4: " + (cancelled ? "—É—Å–ø–µ—à–Ω–æ" : "–Ω–µ—É–¥–∞—á–Ω–æ"));
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        System.out.println("\nüìã –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö submit() –∑–∞–¥–∞—á:");

        // –ó–∞–¥–∞—á–∞ 2 (Runnable —á–µ—Ä–µ–∑ submit)
        try {
            Object result2 = future2.get(1, TimeUnit.SECONDS);
            System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ 2: " + (result2 == null ? "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ (Runnable –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null)" : result2));
        } catch (TimeoutException e) {
            System.out.println("‚è∞ –ó–∞–¥–∞—á–∞ 2 –≤—Å—ë –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        } catch (Exception e) {
            System.out.println("‚ùå –ó–∞–¥–∞—á–∞ 2: –æ—à–∏–±–∫–∞ - " + e.getMessage());
        }

        // –ó–∞–¥–∞—á–∞ 3 (Callable)
        try {
            String result3 = future3.get(1, TimeUnit.SECONDS);
            System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ 3: " + result3);
        } catch (TimeoutException e) {
            System.out.println("‚è∞ –ó–∞–¥–∞—á–∞ 3 –≤—Å—ë –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        } catch (Exception e) {
            System.out.println("‚ùå –ó–∞–¥–∞—á–∞ 3: –æ—à–∏–±–∫–∞ - " + e.getMessage());
        }

        // –ó–∞–¥–∞—á–∞ 5 (Callable)
        try {
            String result5 = future5.get(2, TimeUnit.SECONDS);
            System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ 5: " + result5);
        } catch (TimeoutException e) {
            System.out.println("‚è∞ –ó–∞–¥–∞—á–∞ 5 –≤—Å—ë –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        } catch (Exception e) {
            System.out.println("‚ùå –ó–∞–¥–∞—á–∞ 5: –æ—à–∏–±–∫–∞ - " + e.getMessage());
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º executor
        System.out.println("\nüèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º executor...");
        executor.shutdown();
        boolean terminated = executor.awaitTermination(5, TimeUnit.SECONDS);

        if (!terminated) {
            System.out.println("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á");
            executor.shutdownNow();
        }

        // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        System.out.println("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ (" + poolType + "):");
        System.out.println("-".repeat(40));

        long totalTime = System.currentTimeMillis() - startTime;
        System.out.printf("‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %.1f —Å–µ–∫\n", totalTime / 1000.0);

        int completed = 0, cancelled = 0, unknown = 0;

        for (TaskInfo task : tasks) {
            String status;
            if (task.future == null) {
                status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (execute)";
                completed++;
            } else if (task.future.isCancelled()) {
                status = "‚ùå –û–¢–ú–ï–ù–ï–ù–ê";
                cancelled++;
            } else if (task.future.isDone()) {
                status = "‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞";
                completed++;
            } else {
                status = "‚è≥ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ";
                unknown++;
            }

            System.out.printf("%-10s [%s, %d —Å–µ–∫]: %s\n",
                    task.name, task.method, task.duration, status);
        }

        System.out.println("-".repeat(40));
        System.out.printf("–ò—Ç–æ–≥–æ: ‚úÖ %d –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, ‚ùå %d –æ—Ç–º–µ–Ω–µ–Ω–æ, ‚è≥ %d –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ\n",
                completed, cancelled, unknown);

        // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—É–ª–∞
        if (poolType.equals("CachedThreadPool")) {
            System.out.println("\nüîç –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ CachedThreadPool:");
            System.out.println("   ‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤");
            System.out.println("   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ");
            System.out.println("   ‚Ä¢ –ü–æ—Ç–æ–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");
        } else {
            System.out.println("\nüîç –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ FixedThreadPool(3):");
            System.out.println("   ‚Ä¢ –†–æ–≤–Ω–æ 3 –ø–æ—Ç–æ–∫–∞, –∑–∞–¥–∞—á–∏ –∂–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥–∏");
            System.out.println("   ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤");
            System.out.println("   ‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞—á");
        }
    }

    // –°–æ–∑–¥–∞—ë—Ç Runnable –∑–∞–¥–∞—á—É
    private static Runnable createRunnableTask(String taskName, int sleepSeconds) {
        return () -> {
            String threadName = Thread.currentThread().getName();
            System.out.println("  üèÅ " + taskName + " –°–¢–ê–†–¢ [" + threadName + "]");

            try {
                // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                for (int i = 0; i < sleepSeconds * 10; i++) {
                    Thread.sleep(100);
                    if (Thread.currentThread().isInterrupted()) {
                        System.out.println("  üö´ " + taskName + " –ü–†–ï–†–í–ê–ù–ê [" + threadName + "]");
                        return;
                    }
                }
            } catch (InterruptedException e) {
                System.out.println("  üö´ " + taskName + " –ü–†–ï–†–í–ê–ù–ê [" + threadName + "]");
                return;
            }

            System.out.println("  ‚úÖ " + taskName + " –ó–ê–í–ï–†–®–ï–ù–ê [" + threadName + "]");
        };
    }

    // –°–æ–∑–¥–∞—ë—Ç Callable –∑–∞–¥–∞—á—É
    private static Callable<String> createCallableTask(String taskName, int sleepSeconds) {
        return () -> {
            String threadName = Thread.currentThread().getName();
            System.out.println("  üèÅ " + taskName + " –°–¢–ê–†–¢ [" + threadName + "]");

            try {
                // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                for (int i = 0; i < sleepSeconds * 10; i++) {
                    Thread.sleep(100);
                    if (Thread.currentThread().isInterrupted()) {
                        System.out.println("  üö´ " + taskName + " –ü–†–ï–†–í–ê–ù–ê [" + threadName + "]");
                        return taskName + " - –ü–†–ï–†–í–ê–ù–ê";
                    }
                }
            } catch (InterruptedException e) {
                System.out.println("  üö´ " + taskName + " –ü–†–ï–†–í–ê–ù–ê [" + threadName + "]");
                Thread.currentThread().interrupt(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                return taskName + " - –ü–†–ï–†–í–ê–ù–ê";
            }

            System.out.println("  ‚úÖ " + taskName + " –ó–ê–í–ï–†–®–ï–ù–ê [" + threadName + "]");
            return taskName + " –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ –∑–∞ " + sleepSeconds + " —Å–µ–∫";
        };
    }

    // –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    private static String getTaskStatus(Future<?> future) {
        if (future.isCancelled()) return "‚ùå";
        if (future.isDone()) return "‚úÖ";
        return "‚è≥";
    }

    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    static class TaskInfo {
        final String name;
        final Future<?> future;
        final String method;
        final int duration;

        TaskInfo(String name, Future<?> future, String method, int duration) {
            this.name = name;
            this.future = future;
            this.method = method;
            this.duration = duration;
        }
    }
}